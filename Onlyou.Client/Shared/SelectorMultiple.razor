@using Onlyou.Client.Helpers
<div class="selector-multiple">
	<ul class="selectable-ul">
		@foreach (var item in NoSeleccionados)
		{
			<li @onclick=@(() => Seleccionar(item))>
				@if (!string.IsNullOrEmpty(item.Hexadecimal))
				{
					<span class="color-box" style="background-color:@item.Hexadecimal"></span>
				}
				@item.Valor
			</li>
		}
	</ul>
	<div class="selector-multiple-botones">
		<button type="button" @onclick="SeleccionarTodo">>></button>
		<button type="button" @onclick="DesSeleccionarTodo">@RemoverTodoSelect</button>

	</div>
	<ul class="selectable-ul">
		@foreach (var item in Seleccionados)
		{
			<li @onclick=@(() => Deseleccionar(item))>
				@if (!string.IsNullOrEmpty(item.Hexadecimal))
				{
					<span class="color-box" style="background-color:@item.Hexadecimal"></span>
				}
				@item.Valor
			</li>
		}
	</ul>
</div>
@code {

	private string RemoverTodoSelect = "<<";

	[Parameter]
	public List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();

	[Parameter]
	public List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();

	[Parameter]
	public EventCallback<List<SelectorMultipleModel>> SeleccionadosChanged { get; set; }

	private async Task Seleccionar(SelectorMultipleModel item)
	{
		NoSeleccionados.Remove(item);
		Seleccionados.Add(item);
		await SeleccionadosChanged.InvokeAsync(Seleccionados);
	}

	private async void Deseleccionar(SelectorMultipleModel item)
	{
		Seleccionados.Remove(item);
		NoSeleccionados.Add(item);
		await SeleccionadosChanged.InvokeAsync(Seleccionados);

	}

	private async void SeleccionarTodo()
	{
		Seleccionados.AddRange(NoSeleccionados);
		NoSeleccionados.Clear();
		await SeleccionadosChanged.InvokeAsync(Seleccionados);

	}
	
	private async void DesSeleccionarTodo()
	{
		NoSeleccionados.AddRange(Seleccionados);
		Seleccionados.Clear();
		await SeleccionadosChanged.InvokeAsync(Seleccionados);

	}

}
