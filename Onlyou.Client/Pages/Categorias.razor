@page "/categorias"
@using Onlyou.Shared.DTOS.Categorias
@inject IHttpServicios http
@inject IJSRuntime JS
@inject SweetAlertService swal

<h3 class="titulo-seccion">Gestión de Categorías</h3>

<div class="form-control">
	<input @bind="nombre" placeholder="Nombre de la categoría" />
	<label>
		<input type="checkbox" @bind="estado" />
		Activa
	</label>
	<button class="boton-accion" @onclick="GuardarCategoria">Guardar</button>
	@if (modoEdicion)
	{
		<button class="boton-accion" @onclick="CancelarEdicion">Cancelar</button>
	}

	<InputFile OnChange="SubirImagen" />

</div>

@if (categorias == null)
{
	<p>Cargando categorías...</p>
}
else if (!categorias.Any())
{
	<p>No hay categorías para mostrar.</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Imagen</th>
				<th>Nombre</th>
				<th>Estado</th>
				<th>Acciones</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var cat in categorias)
			{
				<tr>
					<td><img src="@cat.Imagen" alt="@cat.Nombre" width="50" /></td>
					<td>@cat.Nombre</td>
					<td>@(cat.Estado ? "Activa" : "Inactiva")</td>
					<td>
						<button class="boton-accion" @onclick="() => EditarCategoria(cat)">Editar</button>
						<button class="boton-accion" @onclick="() => ArchivarCategoria(cat.Id, cat.Nombre)">Archivar</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<GetCategoriasDTO> categorias = new();
	private string nombre = string.Empty;
	private bool estado = true;
	private int categoriaEditandoId = 0;
	private bool modoEdicion = false;

	private string? imagenBase64;
	private string? imagenExtension;



	protected override async Task OnInitializedAsync()
	{
		await CargarCategorias();
	}

	private async Task CargarCategorias()
	{
		var resultado = await http.Get<List<GetCategoriasDTO>>("api/Categorias");
		if (!resultado.Error)
		{
			categorias = resultado.Respuesta;
			StateHasChanged();
		}
	}

	private async Task GuardarCategoria()
	{
		if (string.IsNullOrWhiteSpace(nombre))
		{
			await swal.FireAsync(new SweetAlertOptions
			{
				Title = "Atención",
				Text = "El nombre de la Categoria es obligatorio",
				Icon = SweetAlertIcon.Warning,
				Background = "#F1C4C4",       // fondo del recuadro
				Color = "#D4006A",            // color del texto
				ConfirmButtonColor = "#D4006A", // color rosa oscuro
				ConfirmButtonText = "Ok",	
				CustomClass = new SweetAlertCustomClass
				{
					Icon = "icono-custom" // 🎯 Aplica color al ícono
				}
			});
			return;
		}

		if (modoEdicion)
		{
			var dto = new EditarCategoriasDTO
			{
				Id = categoriaEditandoId,
				Nombre = nombre,
				Estado = estado,
				Imagen = imagenBase64,
				ImagenExtension = imagenExtension,
			};

			var respuesta = await http.Put($"api/Categorias/{dto.Id}", dto);

			if (respuesta.Error)
			{
				await swal.FireAsync(new SweetAlertOptions
				{
					Title = "Atención",
					Text = "Ocurrio un error al Editar la categoria",
					Icon = SweetAlertIcon.Warning,
					Background = "#F1C4C4",       // fondo del recuadro
					Color = "#D4006A",            // color del texto
					ConfirmButtonColor = "#D4006A", // color rosa oscuro
					ConfirmButtonText = "Ok",
					CustomClass = new SweetAlertCustomClass
					{
						Icon = "icono-custom" // 🎯 Aplica color al ícono
					}
				});
				return;
			}

			modoEdicion = false;
		}
		else
		{
			var dto = new CrearCategoriasDTO
			{
				Nombre = nombre,
				Estado = estado,
				Imagen = imagenBase64,
				ImagenExtension = imagenExtension,
			};

			var respuesta = await http.Post("api/Categorias", dto);

			if (respuesta.Error)
			{
				await swal.FireAsync(new SweetAlertOptions
				{
					Title = "Atención",
					Text = "Ocurrio un error al cargar la categoria",
					Icon = SweetAlertIcon.Warning,
					Background = "#F1C4C4",       // fondo del recuadro
					Color = "#D4006A",            // color del texto
					ConfirmButtonColor = "#D4006A", // color rosa oscuro
					ConfirmButtonText = "Ok",
					CustomClass = new SweetAlertCustomClass
					{
						Icon = "icono-custom" // 🎯 Aplica color al ícono
					}
				});
				return;
			}
		}

		nombre = string.Empty;
		estado = true;
		categoriaEditandoId = 0;

		await CargarCategorias();
	}

	private void EditarCategoria(GetCategoriasDTO cat)
	{
		nombre = cat.Nombre;
		estado = cat.Estado;
		categoriaEditandoId = cat.Id;
		modoEdicion = true;
	}

	private async Task<bool> Confirmar(string nombre)
	{
		var result = await swal.FireAsync(new SweetAlertOptions
		{
			Title = "Atencion",
			Text = $"Estas a punto de Archivar la Categoria {nombre.ToUpper()}. Deseas continuar?",
			Icon = SweetAlertIcon.Question,
			ShowCancelButton = true,
			ConfirmButtonText = "Sí",
			CancelButtonText = "Cancelar",
			Background = "#F1C4C4",         // fondo rosado
			Color = "#D4006A",              // color del texto rosa oscuro
			ConfirmButtonColor = "#D4006A", // botón  rosa oscuri
			CancelButtonColor = "#D4006A",   // botón rosa oscuri
			CustomClass = new SweetAlertCustomClass
			{
				Icon = "icono-custom" // 🎯 Aplica color al ícono
			}
		});

		return result.IsConfirmed;
	}


	private async Task ArchivarCategoria(int id, string nombre)
	{
		var confirmado = await Confirmar(nombre);
		if (confirmado)
		{
			await http.Put<object>($"api/Categorias/Archivados/{id}",null);
			await CargarCategorias();
			await swal.FireAsync("Exito", "Producto Archivado de forma satisfactoria", SweetAlertIcon.Success);

		}
	}

	private void CancelarEdicion()
	{
		nombre = string.Empty;
		estado = true;
		modoEdicion = false;
	}


	private async Task SubirImagen(InputFileChangeEventArgs e)
	{
		var file = e.File;
		var buffer = new byte[file.Size];
		await file.OpenReadStream().ReadAsync(buffer);
		imagenBase64 = Convert.ToBase64String(buffer);
		imagenExtension = Path.GetExtension(file.Name);
	}

}
