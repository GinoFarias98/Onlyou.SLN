@page "/Marcas"
@using Onlyou.Shared.DTOS.Marca
@inject IHttpServicios http
@inject SweetAlertService swal

<h3 class="titulo-seccion">Gestión de Marcas</h3>

<div class="marca-tabla">
    <input @bind="nombre" placeholder="Nombre de la Marca" />
    <input @bind="codigo" placeholder="Código" />
    <label>
        <input type="checkbox" @bind="estado" /> Activo
    </label>

    <button class="boton-accion" @onclick="GuardarMarcas">Guardar</button>
    @if (modoEdicion)
    {
        <button class="boton-accion" @onclick="CancelarEdicion">Cancelar</button>
    }
</div>

@if (marcasDto == null)
{
    <p>Cargando tipos de productos...</p>
}
else if (!marcasDto.Any())
{
    <p>No hay tipos de productos para mostrar.</p>
}
else
{
    <table class="marca-tabla">
        <thead>
            <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tipo in marcasDto)
            {
                <tr>
                    <td>@tipo.Nombre</td>
                    <td>@(tipo.Estado ? "Activo" : "Inactivo")</td>
                    <td>
                        <button class="boton-accion" @onclick="() => EditarMarca(tipo)">Editar</button>
                        <button class="boton-accion" @onclick="() => EliminarMarca(tipo.Id, tipo.Nombre)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<GetMarcaDTO> marcasDto = new();
    private string nombre = string.Empty;
    private string? codigo;
    private bool estado = true;
    private int marcaEditandoId = 0;
    private bool modoEdicion = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarMarcas();
    }

    private async Task CargarMarcas()
    {
        var resultado = await http.Get<List<GetMarcaDTO>>("api/Marca");
        if (!resultado.Error)
        {
            marcasDto = resultado.Respuesta!;
        }
    }

    private async Task GuardarMarcas()
    {
        if (string.IsNullOrWhiteSpace(nombre))
        {
            await swal.FireAsync("Atención", "El nombre es obligatorio", SweetAlertIcon.Warning);
            return;
        }

        if (modoEdicion)
        {
            var dto = new PutMarcaDTO
            {
                Nombre = nombre,
                Estado = estado,
                Codigo = codigo
            };

            var respuesta = await http.Put<PutMarcaDTO, GetMarcaDTO>($"api/Marca/ModificarMarcaId/{marcaEditandoId}", dto);

            if (respuesta.Error)
            {
                await swal.FireAsync("Error", "No se pudo editar la Marca", SweetAlertIcon.Error);
                return;
            }

            var marcaActualizada = respuesta.Respuesta!;
            await swal.FireAsync("Éxito",
                $"Marca '{marcaActualizada.Nombre}' actualizado correctamente",
                SweetAlertIcon.Success);

            modoEdicion = false;
        }
        else
        {
            var dto = new PostMarcaDTO
            {
                Nombre = nombre,
            };

            var respuesta = await http.Post<PostMarcaDTO, GetMarcaDTO>("api/Marca", dto);

            if (respuesta.Error)
            {
                await swal.FireAsync("Error", "No se pudo guardar la Marca", SweetAlertIcon.Error);
                return;
            }

            var marcaNueva = respuesta.Respuesta!;
            await swal.FireAsync("Éxito",
                $"Marca '{marcaNueva.Nombre}' creada correctamente",
                SweetAlertIcon.Success);
        }

        LimpiarFormulario();
        await CargarMarcas();
    }

    private void EditarMarca(GetMarcaDTO tipo)
    {
        marcaEditandoId = tipo.Id;
        nombre = tipo.Nombre;
        estado = tipo.Estado;
        modoEdicion = true;
    }

    private async Task EliminarMarca(int id, string nombre)
    {
        var confirm = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmar",
            Text = $"¿Seguro que deseas eliminar la Marca {nombre}?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "Cancelar"
        });

        if (confirm.IsConfirmed)
        {
            await http.Delete($"api/Marca/EliminarCodigo/{id}");
            await CargarMarcas();
        }
    }

    private void CancelarEdicion() => LimpiarFormulario();

    private void LimpiarFormulario()
    {
        nombre = string.Empty;
        codigo = null;
        estado = true;
        marcaEditandoId = 0;
        modoEdicion = false;
    }
}
