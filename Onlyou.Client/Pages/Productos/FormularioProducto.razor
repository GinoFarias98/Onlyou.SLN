@page "/productosV2/crear"
@page "/productosV2/editar/{id:int}"

@using Onlyou.Client.Helpers
@using Onlyou.Shared.DTOS.Producto
@using Onlyou.Shared.DTOS.Categorias
@using Onlyou.Shared.DTOS.Color
@using Onlyou.Shared.DTOS.Marca
@using Onlyou.Shared.DTOS.Proveedor
@using Onlyou.Shared.DTOS.Talle
@using Onlyou.Shared.DTOS.TipoProducto
@inject IHttpServicios http
@inject SweetAlertService swal
@inject NavigationManager nav

<h3 class="text-center mb-4">
    @(id == 0 ? "Agregar producto" : "Editar producto")
</h3>

<div class="producto-formulario">
    <input @bind="nombre" placeholder="Nombre del producto" class="form-control mb-2" />
    <input @bind="codigo" placeholder="Código del producto" class="form-control mb-2" />
    <textarea @bind="descripcion" placeholder="Descripción" class="form-control mb-2"></textarea>

    <label>Stock</label>
    <input type="number" @bind="stock" class="form-control mb-2" />

    <label>Costo</label>
    <input type="number" step="0.01" @bind="costo" class="form-control mb-2" />

    <label>Precio</label>
    <input type="number" step="0.01" @bind="precio" class="form-control mb-2" />

    <label>Proveedor</label>
    <select @bind="proveedorId" class="form-select mb-2">
        <option value="">-- Seleccione proveedor --</option>
        @foreach (var p in proveedores)
        {
            <option value="@p.Id">@p.Nombre</option>
        }
    </select>

    <label>Categoría</label>
    <div class="d-flex gap-2 align-items-start">
        <select @bind="categoriaId" class="form-select mb-2">
            <option value="">-- Seleccione categoría --</option>
            @foreach (var c in categorias)
            {
                <option value="@c.Id">@c.Nombre</option>
            }
        </select>
        <button type="button" class="btn btn-success"
                @onclick='() => AbrirModalEntidad("Categoría")'>
            +
        </button>
    </div>

    <label>Tipo de producto</label>
    <select @bind="tipoProductoId" class="form-select mb-2">
        <option value="">-- Seleccione tipo de producto --</option>
        @foreach (var t in tiposProducto)
        {
            <option value="@t.Id">@t.Nombre</option>
        }
    </select>

    <label>Marca</label>
    <select @bind="marcaId" class="form-select mb-2">
        <option value="">-- Seleccione marca --</option>
        @foreach (var m in marcas)
        {
            <option value="@m.Id">@m.Nombre</option>
        }
    </select>

    <label>Imagen</label>
    <InputFile OnChange="SubirImagen" class="form-control mb-2" />

    <div class="mt-3">
        <label>Colores:</label>
        <SelectorMultiple NoSeleccionados="ColoresNoSeleccionados"
                          @bind-Seleccionados="ColoresSeleccionados" />
    </div>

    <div class="mt-3">
        <label>Talles:</label>
        <SelectorMultiple NoSeleccionados="TallesNoSeleccionados"
                          @bind-Seleccionados="TallesSeleccionados" />
    </div>

    <div class="mt-4 d-flex gap-2">
        <button @onclick="GuardarProducto" class="btn btn-success">Guardar</button>
        <button @onclick="Volver" class="btn btn-secondary">Volver</button>
    </div>
</div>

<MostrarEntidad @bind-Mostrar="mostrarModal"
                Titulo="@modalTitulo"
                Campos="camposModal"
                EntidadCreada="OnEntidadCreada" />

@code {

    #region Modal Crear Entidad

    private bool mostrarModal = false;
    private string modalTitulo = "";
    private List<MostrarEntidad.CampoModal> camposModal = new();

    private void AbrirModalEntidad(string entidad)
    {
        modalTitulo = entidad;

        camposModal = entidad switch
        {
            "Proveedor" => new List<MostrarEntidad.CampoModal>
            {
                new() { Label = "Nombre", Placeholder = "Nombre del proveedor" },
                new() { Label = "CUIT", Placeholder = "CUIT" },
                new() { Label = "Dirección", Placeholder = "Dirección" }
            },
            "Categoría" => new List<MostrarEntidad.CampoModal>
            {
                new() { Label = "Nombre", Placeholder = "Nombre de la categoría" },
                new() { Label = "Estado", Placeholder = "Activa (true/false)" },
                new() { Label = "Imagen", Placeholder = "Imagen en Base64" },
            },
            _ => new List<MostrarEntidad.CampoModal>()
        };

        mostrarModal = true;
    }

    private async Task OnEntidadCreada(Dictionary<string, string> datos)
    {
        switch (modalTitulo)
        {
            case "Proveedor":
                var dto = new PostProveedorDTO
                {
                    Nombre = datos["Nombre"],
                    CUIT = datos["CUIT"],
                    Direccion = datos["Dirección"]
                };
                var res = await http.Post<PostProveedorDTO, GetProveedorDTO>("api/Proveedores", dto);
                if (!res.Error && res.Respuesta != null) proveedores.Add(res.Respuesta!);
                break;

            case "Categoría":
                var catDto = new CrearCategoriasDTO
                {
                    Nombre = datos["Nombre"],
                    Estado = datos.ContainsKey("Estado") && bool.TryParse(datos["Estado"], out var estadoCat) ? estadoCat : true,
                    Imagen = datos.ContainsKey("ImagenBase64") ? datos["ImagenBase64"] : null,
                    ImagenExtension = datos.ContainsKey("ImagenExtension") ? datos["ImagenExtension"] : null
                };

                var catRes = await http.Post<CrearCategoriasDTO, GetCategoriasDTO>("api/Categorias", catDto);

                if (!catRes.Error && catRes.Respuesta != null)
                {
                    categorias.Add(catRes.Respuesta);
                }
                break;
        }
    }

    #endregion

    [Parameter] public int id { get; set; }

    private List<GetProveedorDTO> proveedores = new();
    private List<GetCategoriasDTO> categorias = new();
    private List<GetTipoProductoDTO> tiposProducto = new();
    private List<GetMarcaDTO> marcas = new();
    private List<GetColorDTO> coloresDisponibles = new();
    private List<TallesDTO> tallesDisponibles = new();

    private List<SelectorMultipleModel> ColoresSeleccionados = new();
    private List<SelectorMultipleModel> ColoresNoSeleccionados = new();
    private List<SelectorMultipleModel> TallesSeleccionados = new();
    private List<SelectorMultipleModel> TallesNoSeleccionados = new();

    private string nombre = string.Empty;
    private string codigo = string.Empty;
    private string? descripcion;
    private int stock;
    private decimal costo;
    private decimal precio;
    private int proveedorId;
    private int categoriaId;
    private int tipoProductoId;
    private int marcaId;
    private string? imagenBase64;
    private string? imagenExtension;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosRelacionados();

        if (id != 0)
        {
            var res = await http.Get<GetProductoDTO>($"Productos/Id/{id}");
            if (!res.Error && res.Respuesta != null)
            {
                var p = res.Respuesta;
                nombre = p.Nombre;
                codigo = p.Codigo;
                descripcion = p.Descripcion;
                stock = p.Stock;
                costo = p.Costo;
                precio = p.Precio;
                proveedorId = p.ProveedorId;
                categoriaId = p.CategoriaId;
                tipoProductoId = p.TipoProductoId;
                marcaId = p.MarcaId;

                ColoresSeleccionados = coloresDisponibles
                    .Where(c => p.Colores.Contains(c.Id))
                    .Select(c => new SelectorMultipleModel(c.Id.ToString(), c.Nombre, c.Hexadecimal))
                    .ToList();

                ColoresNoSeleccionados = coloresDisponibles
                    .Where(c => !p.Colores.Contains(c.Id))
                    .Select(c => new SelectorMultipleModel(c.Id.ToString(), c.Nombre, c.Hexadecimal))
                    .ToList();

                TallesSeleccionados = tallesDisponibles
                    .Where(t => p.Talles.Contains(t.Id))
                    .Select(t => new SelectorMultipleModel(t.Id.ToString(), t.Nombre))
                    .ToList();

                TallesNoSeleccionados = tallesDisponibles
                    .Where(t => !p.Talles.Contains(t.Id))
                    .Select(t => new SelectorMultipleModel(t.Id.ToString(), t.Nombre))
                    .ToList();
            }
        }
        else
        {
            ColoresNoSeleccionados = coloresDisponibles
                .Select(c => new SelectorMultipleModel(c.Id.ToString(), c.Nombre, c.Hexadecimal)).ToList();

            TallesNoSeleccionados = tallesDisponibles
                .Select(t => new SelectorMultipleModel(t.Id.ToString(), t.Nombre)).ToList();
        }
    }

    private async Task CargarDatosRelacionados()
    {
        proveedores = (await http.Get<List<GetProveedorDTO>>("api/Proveedores")).Respuesta ?? new();
        categorias = (await http.Get<List<GetCategoriasDTO>>("api/Categorias")).Respuesta ?? new();
        tiposProducto = (await http.Get<List<GetTipoProductoDTO>>("api/TipoProducto")).Respuesta ?? new();
        marcas = (await http.Get<List<GetMarcaDTO>>("api/Marca")).Respuesta ?? new();
        coloresDisponibles = (await http.Get<List<GetColorDTO>>("api/ManageColor")).Respuesta ?? new();
        tallesDisponibles = (await http.Get<List<TallesDTO>>("api/Talle")).Respuesta ?? new();
    }

    private async Task GuardarProducto()
    {
        var coloresSeleccionados = ColoresSeleccionados.Select(x => int.Parse(x.Llave)).ToList();
        var tallesSeleccionados = TallesSeleccionados.Select(x => int.Parse(x.Llave)).ToList();

        if (id == 0)
        {
            var dto = new PostProductoDTO
            {
                Nombre = nombre,
                Codigo = codigo,
                Descripcion = descripcion,
                Stock = stock,
                Costo = costo,
                Precio = precio,
                ProveedorId = proveedorId,
                CategoriaId = categoriaId,
                TipoProductoId = tipoProductoId,
                MarcaId = marcaId,
                Imagen = imagenBase64,
                ImagenExtension = imagenExtension,
                Colores = coloresSeleccionados,
                Talles = tallesSeleccionados
            };

            var r = await http.Post<PostProductoDTO, GetProductoDTO>("Productos", dto);
            if (!r.Error)
                await swal.FireAsync("Éxito", "Producto creado correctamente", SweetAlertIcon.Success);
            else
                await swal.FireAsync("Error", await r.ObtenerErrorAsync(), SweetAlertIcon.Error);
        }
        else
        {
            var dto = new PutProductoDTO
            {
                Nombre = nombre,
                Codigo = codigo,
                Descripcion = descripcion,
                Stock = stock,
                Costo = costo,
                Precio = precio,
                ProveedorId = proveedorId,
                CategoriaId = categoriaId,
                TipoProductoId = tipoProductoId,
                MarcaId = marcaId,
                Imagen = imagenBase64,
                ImagenExtension = imagenExtension,
                Colores = coloresSeleccionados,
                Talles = tallesSeleccionados
            };

            var r = await http.Put<PutProductoDTO, GetProductoDTO>($"Productos/{id}", dto);
            if (!r.Error)
                await swal.FireAsync("Éxito", "Producto actualizado correctamente", SweetAlertIcon.Success);
            else
                await swal.FireAsync("Error", await r.ObtenerErrorAsync(), SweetAlertIcon.Error);
        }

        Volver();
    }

    private async Task SubirImagen(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        imagenBase64 = Convert.ToBase64String(buffer);
        imagenExtension = Path.GetExtension(file.Name);
    }

    private void Volver() => nav.NavigateTo("/productosV2");
}
