@page "/productosV2"
@using Onlyou.Shared.DTOS.Producto
@inject IHttpServicios http
@inject SweetAlertService swal
@inject NavigationManager nav
@using Microsoft.AspNetCore.Components.Web

<h3 class="titulo-seccion">Productos</h3>

<div class="flex justify-end mb-4">
	<button class="btn btn-primary" @onclick="IrACrearProducto">
		+ Agregar producto
	</button>
</div>

@if (productos == null)
{
	<p>Cargando productos...</p>
}
else if (!productos.Any())
{
	<p>No hay productos disponibles.</p>
}
else
{
	<div class="row g-4">
		@foreach (var prod in productos)
		{
			<div class="col-6 col-sm-4 col-md-3 col-lg-2">
				<div class="card h-100 shadow-sm cursor-pointer" @onclick="() => VerDetalle(prod)">

					<!-- Contenedor de imagen fijo -->
					<div class="card-img-top d-flex align-items-center justify-content-center bg-light" style="height:150px; overflow:hidden;">
						<img src="@prod.Imagen" alt="@prod.Nombre" style="max-height:100%; max-width:100%; object-fit:contain;" />
					</div>

					<div class="card-body p-2">
						<h5 class="card-title mb-1">@prod.Nombre</h5>
						<p class="card-text text-muted mb-1">Código: @prod.Codigo</p>
						<p class="card-text fw-bold mb-2">$@prod.Precio</p>

						<div class="d-flex mb-1">
							@foreach (var c in prod.ColoresDetalle)
							{
								<span class="rounded-circle border me-1" style="width:16px; height:16px; background-color:@c.Hexadecimal;"></span>
							}
						</div>

						<div class="text-muted small">
							Talles: @string.Join(", ", prod.TallesDetalle.Select(t => t.Nombre))
						</div>
					</div>
				</div>
			</div>
		}
	</div>
}
@* Modal de detalle con Bootstrap *@
@if (productoSeleccionado != null)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
		<div class="modal-dialog modal-dialog-centered modal-lg">
			<div class="modal-content rounded-4 shadow">
				<div class="modal-header border-0">
					<h5 class="modal-title">@productoSeleccionado.Nombre</h5>
					<button type="button" class="btn-close" @onclick="CerrarModal"></button>
				</div>
				<div class="modal-body">
					<div class="text-center mb-3">
						<img src="@productoSeleccionado.Imagen" class="img-fluid rounded mb-3" style="max-height:300px; object-fit:contain;" />
					</div>
					<p><strong>Código:</strong> @productoSeleccionado.Codigo</p>
					<p><strong>Precio:</strong> $@productoSeleccionado.Precio</p>
					<p><strong>Costo:</strong> $@productoSeleccionado.Costo</p>
					<p><strong>Marca:</strong> @productoSeleccionado.MarcaNombre</p>
					<p><strong>Proveedor:</strong> @productoSeleccionado.ProveedorNombre</p>
					<p><strong>Categoría:</strong> @productoSeleccionado.CategoriaNombre</p>

					<div class="d-flex align-items-center mb-2">
						<strong class="me-2">Colores:</strong>
						@foreach (var c in productoSeleccionado.ColoresDetalle)
						{
							<span class="rounded-circle border me-1" style="width:20px; height:20px; background-color:@c.Hexadecimal;"></span>
						}
					</div>

					<div class="mb-2">
						<strong>Talles:</strong> @string.Join(", ", productoSeleccionado.TallesDetalle.Select(t => t.Nombre))
					</div>
				</div>
				<div class="modal-footer border-0">
					<button class="btn btn-warning" @onclick="EditarProducto">Editar</button>
					<button class="btn btn-danger" @onclick="ArchivarProducto">Archivar</button>
					<button class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
				</div>
			</div>
		</div>
	</div>
}


@code {
	private List<GetProductoDTO> productos = new();
	private GetProductoDTO? productoSeleccionado;

	protected override async Task OnInitializedAsync()
	{
		await CargarProductos();
	}

	private async Task CargarProductos()
	{
		productos = (await http.Get<List<GetProductoDTO>>("Productos")).Respuesta ?? new();
	}

	private void VerDetalle(GetProductoDTO prod)
	{
		productoSeleccionado = prod;
	}

	private void CerrarModal()
	{
		productoSeleccionado = null;
	}

	private void IrACrearProducto()
	{
		nav.NavigateTo("/productosV2/crear");
	}

	private void EditarProducto()
	{
		if (productoSeleccionado is not null)
		{

			nav.NavigateTo($"/productosV2/editar/{productoSeleccionado.Id}");
		}
	}

	private async Task ArchivarProducto()
	{
		if (productoSeleccionado is null) return;

		var confirm = await swal.FireAsync(new SweetAlertOptions
		{
			Title = "Confirmar",
			Text = $"¿Seguro que deseas archivar el producto {productoSeleccionado.Nombre}?",
			Icon = SweetAlertIcon.Question,
			ShowCancelButton = true
		});

		if (confirm.IsConfirmed)
		{
			await http.Put<object>($"Productos/UpdateEstado/{productoSeleccionado.Id}", null);
			await CargarProductos();
			CerrarModal();
			await swal.FireAsync("Éxito", "Producto archivado correctamente", SweetAlertIcon.Success);
		}
	}
}
