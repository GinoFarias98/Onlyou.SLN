@page "/Proveedores"
@using Onlyou.Shared.DTOS.Proveedor
@inject IHttpServicios http
@inject SweetAlertService swal

<h3 class="titulo-seccion">Gestión de Proveedores</h3>

<div class="formulario-proveedor">
    <input class="input-texto" @bind="nombre" placeholder="Nombre del Proveedor" />
    <input class="input-texto" @bind="direccion" placeholder="Dirección" />
    <input class="input-texto" @bind="razonSocial" placeholder="Razón Social" />
    <input class="input-texto" @bind="cuit" placeholder="CUIT" />
    <input class="input-texto" @bind="telefono" placeholder="Teléfono" />
    <input class="input-texto" @bind="email" placeholder="Email" />

    <button class="boton-accion" @onclick="GuardarProveedores">@((modoEdicion ? "Actualizar" : "Guardar"))</button>
    @if (modoEdicion)
    {
        <button class="boton-accion-cancelar" @onclick="CancelarEdicion">Cancelar</button>
    }
</div>

@if (provDto == null)
{
    <p>Cargando Proveedores...</p>
}
else if (!provDto.Any())
{
    <p>No hay proveedores para mostrar.</p>
}
else
{
    <table class="tabla-general">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Razón Social</th>
                <th>Teléfono</th>
                <th>Dirección</th>
                <th>Email</th>
                <th>CUIT</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var proveedor in provDto)
            {
                <tr>
                    <td>@proveedor.Nombre</td>
                    <td>@proveedor.RazonSocial</td>
                    <td>@proveedor.Telefono</td>
                    <td>@proveedor.Direccion</td>
                    <td>@proveedor.Email</td>
                    <td>@proveedor.CUIT</td>
                    <td>
                        <button class="boton-accion" @onclick="() => EditarProveedor(proveedor)">Editar</button>
                        <button class="boton-accion-eliminar" @onclick="() => ArchivarProveedor(proveedor.Id, proveedor.Nombre)">Archivar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<GetProveedorDTO> provDto = new();
    private string nombre = string.Empty;
    private bool estado = true;
    private int provEditandoId = 0;
    private bool modoEdicion = false;
    private string direccion = string.Empty;
    private string razonSocial = string.Empty;
    private string cuit = string.Empty;
    private string telefono = string.Empty;
    private string email = string.Empty;

    protected override async Task OnInitializedAsync() => await CargarProveedores();

    private async Task CargarProveedores()
    {
        var resultado = await http.Get<List<GetProveedorDTO>>("api/Proveedores");
        if (!resultado.Error)
        {
            provDto = resultado.Respuesta!;
        }
    }

    private async Task GuardarProveedores()
    {
        // Validaciones front
        if (string.IsNullOrWhiteSpace(nombre))
        {
            await swal.FireAsync("Atención", "El nombre es obligatorio", SweetAlertIcon.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(cuit))
        {
            await swal.FireAsync("Atención", "El CUIT es obligatorio", SweetAlertIcon.Warning);
            return;
        }

        try
        {
            if (modoEdicion)
            {
                var dto = new PutProveedorDTO
                {
                    Nombre = nombre,
                    Estado = estado,
                    Direccion = direccion,
                    RazonSocial = razonSocial,
                    CUIT = cuit,
                    Telefono = telefono,
                    Email = email
                };

                var respuesta = await http.Put<PutProveedorDTO, GetProveedorDTO>($"api/Proveedores/ModificarProveedorId/{provEditandoId}", dto);

                if (respuesta.Error)
                {
                    var mensaje = await respuesta.ObtenerErrorAsync();
                    await swal.FireAsync("Error", mensaje, SweetAlertIcon.Warning);
                    return; // ⚠️ Detener si hay error
                }

                await swal.FireAsync("Éxito", $"Proveedor '{respuesta.Respuesta!.Nombre}' actualizado correctamente", SweetAlertIcon.Success);
                modoEdicion = false;
            }
            else
            {
                var dto = new PostProveedorDTO
                {
                    Nombre = nombre,
                    Estado = estado,
                    Direccion = direccion,
                    RazonSocial = razonSocial,
                    CUIT = cuit,
                    Telefono = telefono,
                    Email = email
                };

                var respuesta = await http.Post<PostProveedorDTO, GetProveedorDTO>("api/Proveedores", dto);

                if (respuesta.Error)
                {
                    var mensaje = await respuesta.ObtenerErrorAsync();
                    await swal.FireAsync("Error", mensaje, SweetAlertIcon.Warning);
                    return; // ⚠️ Detener si hay error
                }

                await swal.FireAsync("Éxito", $"Proveedor '{respuesta.Respuesta!.Nombre}' creado correctamente", SweetAlertIcon.Success);
            }

            LimpiarFormulario();
            await CargarProveedores();
        }
        catch (Exception ex)
        {
            await swal.FireAsync("Error inesperado", ex.Message, SweetAlertIcon.Error);
        }
    }

    private void EditarProveedor(GetProveedorDTO proveedor)
    {
        provEditandoId = proveedor.Id;
        nombre = proveedor.Nombre;
        estado = proveedor.Estado;
        direccion = proveedor.Direccion;
        razonSocial = proveedor.RazonSocial;
        cuit = proveedor.CUIT;
        telefono = proveedor.Telefono;
        email = proveedor.Email;
        modoEdicion = true;
    }

    private async Task ArchivarProveedor(int id, string nombre)
    {
        var confirm = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmar",
            Text = $"¿Seguro que deseas eliminar el proveedor {nombre}?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "Cancelar"
        });

        if (confirm.IsConfirmed)
        {
            var respuesta = await http.Put<object>($"api/Proveedores/EliminarCodigo/{id}", null);
            if (respuesta.Error)
            {
                var mensaje = await respuesta.ObtenerErrorAsync();
                await swal.FireAsync("Error", mensaje, SweetAlertIcon.Warning);
                return; // ⚠️ Detener si hay error
            }

            await CargarProveedores();
        }
    }

    private void CancelarEdicion() => LimpiarFormulario();

    private void LimpiarFormulario()
    {
        nombre = string.Empty;
        estado = true;
        direccion = string.Empty;
        razonSocial = string.Empty;
        cuit = string.Empty;
        telefono = string.Empty;
        email = string.Empty;
        provEditandoId = 0;
        modoEdicion = false;
    }
}
