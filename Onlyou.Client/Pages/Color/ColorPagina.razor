@page "/colores"
@using Onlyou.Shared.DTOS.Color
@inject IHttpServicios http
@inject SweetAlertService swal

<h3 class="titulo-seccion">Gestión de Colores</h3>

<div class="mb-3">
    <input type="text" @bind="nombre" placeholder="Nombre del color" class="form-control" />
    <input type="text" @bind="hexadecimal" placeholder="#FFFFFF" maxlength="7" class="form-control" />
</div>

<div class="mb-3">
    <button class="btn-onlyou" @onclick="GuardarColor">
        @(modoEdicion ? "Actualizar" : "Agregar")
    </button>
    @if (modoEdicion)
    {
        <button class="btn-onlyou-secondary" @onclick="CancelarEdicion">Cancelar</button>
    }
</div>

@if (colores == null)
{
    <p>Cargando colores...</p>
}
else if (!colores.Any())
{
    <p>No hay colores para mostrar.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Hexadecimal</th>
                <th>Vista</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var color in colores)
            {
                <tr>
                    <td>@color.Nombre</td>
                    <td>@color.Hexadecimal</td>
                    <td>
                        <div style="width:20px;height:20px;border:1px solid black;background-color:@color.Hexadecimal"></div>
                    </td>
                    <td>
                        <button class="btn-onlyou btn-sm" @onclick="() => EditarColor(color)">Editar</button>
                        <button class="btn-onlyou-danger btn-sm" @onclick="() => ArchivarColor(color.Id, color.Nombre)">Archivar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<GetColorDTO> colores = new();
    private string nombre = string.Empty;
    private string hexadecimal = "#000000";
    private bool estado = true;
    private int colorEditandoId = 0;
    private bool modoEdicion = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarColores();
    }

    private async Task CargarColores()
    {
        var resultado = await http.Get<List<GetColorDTO>>("api/ManageColor");
        if (!resultado.Error)
            colores = resultado.Respuesta!;
    }

    private async Task GuardarColor()
    {
        if (string.IsNullOrWhiteSpace(nombre) || string.IsNullOrWhiteSpace(hexadecimal))
        {
            await swal.FireAsync("Atención", "El nombre y el código hexadecimal son obligatorios", SweetAlertIcon.Warning);
            return;
        }

        if (modoEdicion)
        {
            var dto = new PutColorDTO
            {
                Nombre = nombre,
                Hexadecimal = hexadecimal,
                Estado = estado,
            };

            var respuesta = await http.Put<PutColorDTO, GetColorDTO>($"api/ManageColor/ModificarColorId/{colorEditandoId}", dto);

            if (respuesta.Error)
            {
                var mensaje = await respuesta.ObtenerErrorAsync();
                await swal.FireAsync("Error", mensaje, SweetAlertIcon.Warning);
                return;
            }

            var colorActualizado = respuesta.Respuesta!;
            await swal.FireAsync("Éxito",
                $"Color '{colorActualizado.Nombre}' actualizado correctamente con HEX {colorActualizado.Hexadecimal}",
                SweetAlertIcon.Success);
            modoEdicion = false;
        }
        else
        {
            var dto = new PostColorDTO
            {
                Nombre = nombre,
                Hexadecimal = hexadecimal,
            };

            var respuesta = await http.Post<PostColorDTO, GetColorDTO>("api/ManageColor", dto);

            if (respuesta.Error)
            {
                var mensaje = await respuesta.ObtenerErrorAsync();
                await swal.FireAsync("Error", mensaje, SweetAlertIcon.Warning);
                return;
            }

            var colorNuevo = respuesta.Respuesta!;
            await swal.FireAsync("Éxito",
                $"Color '{colorNuevo.Nombre}' creado correctamente con HEX {colorNuevo.Hexadecimal}",
                SweetAlertIcon.Success);
        }

        LimpiarFormulario();
        await CargarColores();
    }


    private void EditarColor(GetColorDTO color)
    {
        colorEditandoId = color.Id;
        nombre = color.Nombre;
        hexadecimal = color.Hexadecimal;
        estado = color.Estado;
        modoEdicion = true;
    }

    private async Task ArchivarColor(int id, string nombre)
    {
        var confirm = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmar",
            Text = $"¿Seguro que deseas archivar el color {nombre}?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "Cancelar"
        });

        if (confirm.IsConfirmed)
        {
            await http.Put<object>($"api/ManageColor/Archivados/{id}", null);
            await CargarColores();
        }
    }

    private void CancelarEdicion() => LimpiarFormulario();

    private void LimpiarFormulario()
    {
        nombre = string.Empty;
        hexadecimal = "#000000";
        estado = true;
        colorEditandoId = 0;
        modoEdicion = false;
    }
}
